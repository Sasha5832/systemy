#define FCY 4000000UL          
#include <xc.h>
#include <stdint.h>
#include <libpic30.h>

// =========================
// Konfiguracja mikrokontrolera
// =========================
#pragma config POSCMOD = NONE, FNOSC = FRC
#pragma config FCKSM = CSDCMD, IESO = OFF, OSCIOFNC = OFF
#pragma config WDTPS = PS32768, FWPSA = PR128, FWDTEN = OFF, WINDIS = ON
#pragma config ICS   = PGx2, GWRP = OFF,  GCP = OFF,  JTAGEN = OFF

// =========================
// Stałe i zmienne
// =========================
#define ALARM_THRESHOLD 512  // połowa zakresu 10-bitowego ADC (0–1023)
#define LED_BLINK_TIME_MS 500
#define ALARM_BLINK_DURATION_MS 5000

uint8_t alarmActive = 0;
uint8_t blinkingPhase = 1;
uint32_t elapsedTime = 0;

static void initIO(void);
static void initADC(void);
static uint16_t readPot(void);
static void delayMs(uint16_t ms);
static void waitBlink(uint16_t ms);
static uint8_t isButtonPressed(void);

// =========================
// Inicjalizacja
// =========================
static void initIO(void)
{
    TRISA = 0x0000; // wszystkie wyjścia
    TRISD |= (1 << 6); // RD6 jako wejście
    AD1PCFG = 0xFFFF;
    AD1PCFGbits.PCFG5 = 0; // RB5 jako analog
    TRISBbits.TRISB5 = 1;
}

static void initADC(void)
{
    AD1CON1 = 0;
    AD1CON2 = 0;
    AD1CON3 = 0x1F02;
    AD1CHS  = 0x0005;
    AD1CON1bits.ADON = 1;
}

static uint16_t readPot(void)
{
    AD1CON1bits.SAMP = 1;
    __delay_us(10);
    AD1CON1bits.SAMP = 0;
    while (!AD1CON1bits.DONE);
    return ADC1BUF0 & 0x03FF;
}

static void delayMs(uint16_t ms)
{
    while (ms--) __delay_ms(1);
}

static void waitBlink(uint16_t ms)
{
    // czeka w odcinkach 100ms, sprawdzając przycisk i potencjometr
    for (uint16_t i = 0; i < ms / 100; i++) {
        if (readPot() < ALARM_THRESHOLD || isButtonPressed()) {
            alarmActive = 0;
            LATA = 0;
            return;
        }
        delayMs(100);
        elapsedTime += 100;
    }
}

static uint8_t isButtonPressed(void)
{
    static uint8_t prevState = 1;
    uint8_t now = PORTDbits.RD6;
    __delay32(15000); // debounce
    uint8_t pressed = (prevState == 1 && now == 0);
    prevState = now;
    return pressed;
}

// =========================
// Główna pętla
// =========================
int main(void)
{
    initIO();
    initADC();

    while (1)
    {
        uint16_t pot = readPot();

        if (!alarmActive && pot >= ALARM_THRESHOLD) {
            // uruchom alarm
            alarmActive = 1;
            elapsedTime = 0;

            // Faza 1: mruganie jednej diody przez 5 sekund
            while (elapsedTime < ALARM_BLINK_DURATION_MS && alarmActive) {
                LATA = blinkingPhase ? 0x01 : 0x00;
                blinkingPhase = !blinkingPhase;
                waitBlink(LED_BLINK_TIME_MS);
            }

            // Faza 2: wszystkie diody zapalone
            if (alarmActive) {
                LATA = 0xFF;
            }
        }

        // Wyłączenie alarmu: potencjometr poniżej progu lub RD6
        if (alarmActive && (pot < ALARM_THRESHOLD || isButtonPressed())) {
            alarmActive = 0;
            LATA = 0;
        }

        delayMs(50); // odciążenie CPU
    }

    return 0;
}
